/** ИНКАПСУЛЯЦИЯ В JAVA ОЧЕНЬ ВАЖНА
 *
 * В JAVA инкапсуляция реализуется 2 приемами:
 *
 *      1) навешивание private на поля класса, чтобы user не мог их доставать через точку
 *
 *      2) setter/getter - методы, (а) чтобы пользователь мог вносить данные в поля класса,
 *      не ломая логику(если user вносит что-то не то - мы обрабатываем это if-ами/а может даже Exception-ами),
 *      и (б) чтобы пользователю выдавались данные так, чтобы не звякнуть лишнего или проверть, а может ли
 *      данный пользователь получить данные этого поля или это какой-тоне "правильный" user.
 *
 *
 * */

public class Incapsulation {
    public static void main(String [] args){ /* Кста, видимо здесь стринговый параметр args обязателен - чтобы
                                                запускать прогу из cmd с какими-то изначальными параметрами,
                                                помнишь, как мы делали в CS50 при запуске кода на C.
                                             */



    }


}

class Person{
    private String name;
    private int age;  // теперь это поле доступно только внутри класса, хз как там у наследников...
    // TODO: Прочекать как там у наследников(см все модификаторы доступа - в чем их разница)

    void speak(){ // возможно, если не указывать модиф доступа, то он автоматом - public
        System.out.println("Привет, я "+name+" и мне "+age);
    }
    void toPension(){

    }
    String myWorkList(String[] professions, int workStage){
        String preString = "Мой стаж "+workStage+", я работал: ";
        StringBuilder toReturn = new StringBuilder(); /* Отсутсвие парам по умолч полезно, сразу ясно, что если
                                                    в скобках ниче нет и не показывает ошибки - то там и нет
                                                    никаких параметров */
        toReturn.append(preString);
        for(String iterString: professions){ /* Ничесе, в Java НЕЛЬЗЯ конкатенировать строки В ЦИКЛЕ
                                                Для решения этой проблемы используют StringBuilder */
            toReturn.append(iterString);
        }
        // Прикольно, что IDE показывает нам избыточные переменные (Здесь удалил переменную finishReturn)
        return toReturn.toString(); // Но нужно в конце так конвертировать StringBuilder в String

    }
}